#!/usr/bin/python
#
# tvinfo
#
# Parse the IMDB episode listing for a specfic TV Show and extract information
# about each episode
#
# (C) 2007 Scott Raynel <scottraynel@gmail.com>
#
# $Id$

IMDB_PREFIX = "http://www.imdb.com"

import sys
from HTMLParser import HTMLParser

class IMDBEpisodesParser(HTMLParser):

	def __init__(self):
		self.episodes = []
		self.episode = None
		self.expecting = ""
		HTMLParser.__init__(self)

	def handle_starttag(self, tag, attrs):
		if tag == "b":
			if self.episode is None:
				return
			self.expecting = "air_date"

		elif tag == "a":
			if len(attrs) != 1:
				return
			(k,v) = attrs[0]
			if k == "name":
				if v.startswith("year-") == False:
					return
				if self.episode != None:
					self.episodes.append(self.episode)
				self.episode = {}
				return
			elif k == "href":
				if self.episode is None:
					return
				self.episode['imdb_link'] = IMDB_PREFIX + v
				self.expecting = "title"
		elif tag == "h4":
			if self.episode is None:
				return
			self.expecting = "number"
		elif tag == "br":
			if self.episode is None:
				return
			if self.expecting == "air_date":
				self.expecting = "plot"
			else:
				self.expecting = ""
		else:
			self.expecting = ""
			

	def handle_data(self, data):
		if self.episode is None:
			return

		if self.expecting == "":
			return
		elif self.expecting == "number":
			parts = data.split(" ")
			self.episode['season'] = int(parts[1].replace(',',''))
			self.episode['episode'] = int(parts[3].replace(':',''))
		elif self.expecting == "air_date":
			parts = data.split(":")
			if len(parts) != 4:
				return
			self.episode['air_date'] = parts[1].strip()
		else:
			self.episode[self.expecting] = data


# We can feed it a local copy of the episodes page for testing:
if __name__ == "__main__":
	f = open(sys.argv[1], 'r')
	p = IMDBEpisodesParser()

	for line in f.readlines():
		p.feed(line)

	print p.episodes
	p.close()
	f.close()

